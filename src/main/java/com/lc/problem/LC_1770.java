package com.lc.problem;

import java.util.HashMap;
import java.util.Map;

public class LC_1770 {

	public static void main(String[] args) {
		LC_1770 obj = new LC_1770();
		int[] nums = { -386,-280,-431,-984,118,-988,799,-180,-53,-722,-840,938,420,126,724,514,659,-857,-608,606,512,-174,-593,387,-984,-259,631,775,-735,396,28,120,-106,-405,-987,-511,836,-901,-58,-126,535,-12,-539,599,354,908,-803,-242,764,574,187,417,-600,-469,726,-497,-571,-358,-940,485,73,956,446,787,-216,763,-274,916,-709,-301,-79,882,482,-394,-699,141,19,386,761,-529,515,974,715,236,926,-801,208,988,960,659,492,855,-231,744,138,-434,-720,511,58,-739,414,574,-593,-575,151,-673,-281,20,-264,-39,-67,-533,386,-585,-610,-767,-422,495,363,937,-864,-864,147,-893,-438,267,588,-605,831,-498,546,959,621,100,764,260,-741,415,32,31,-454,689,412,208,-285,891,446,648,879,-663,230,918,294,-107,852,945,339,-24,587,-595,-706,997,394,738,-191,-826,525,618,734,-718,-364,-669,-177,-427,-690,-646,209,-678,-210,-34,-717,706,-609,-416,539,22,940,876,-993,-75,951,-238,-555,862,310,624,296,-613,-800,435,223,753,-681,-557,296,711,986,-79,-904,-567,-604,-134,563,-543,-155,198,926,-104,909,368,-964,666,-779,261,-766,229,462,-687,-853,978,-559,899,-236,462,-914,-778,235,-301,846,609,82,-758,-935,812,-164,-659,-507,-713,708,970,790,624,-662,-925,147,-188,960,-275,-965,256,841,-522,-222,726,-191,613,-199,-99,-451,791,-195,444,-175,842,-648,723,-997,-13,-675,203,-21,411,-494,449,290,668,-72,86,-453,-222,-443,595,665,-336,701,501,-772,-226,107,731,621,738,-48,-690,-924,-753,455,340,-655,-155,-718,213,9,-214,788,-55,-424,828,-676,459,833,-495,-766,959,15,-11,-969,605,389,-363,-511,-54,825,-62,-887,146,756,590,346,-540,-977,301,-380,302,107,328,-977,149,45,673,-901,944,385,869,-662,-949,507,-267,477,975,-736,-98,-515,-768,442,816,-90,-25,433,-857,566,756,671,-469,342,83,437,982,-653,334,-121,-807,-82,-272,685,-544,243,179,-865,355,23,929,590,743,729,-591,-330,618,-232,-587,-589,865,323,-483,324,-815,-153,-784,-675,589,662,867,970,399,-845,45,-908,-269,149,44,-956,646,-903,-569,940,635,-280,965,961,150,804,83,500,-976,-710,885,625,-442,123,451,-819,-962,-161,741,-147,845,-528,272,26,436,-2,-822,-714,-404,167,-417,976,-398,-571,80,-366,-832,-435,93,961,-421,759,319,-961,-552,-943,-310,154,-827,-999,373,-327,680,842,-3,-937,788,584,-256,450,178,834,53,-70,396,48,-378,-754,-719,257,-147,-116,873,8,330,647,851,-331,-702,822,-17,82,-608,-955,-197,934,-376,357,968,739,-538,-860,688,378,-977,-424,-641,-418,558,-484,-251,-611,-543,-723,-81,672,434,571,669,-136,23,232,-338,-536,806,278,-830,557,-834,-803,652,564,-600,393,-370,861,-848,-296,866,-99,-954,258,-373,264,-776,679,-41,301,-791,-882,19,179,196,517,-744,205,531,-933,-686,712,521,543,882,876,-355,-489,262,142,114,-713,16,-779,-821,-198,-949,-713,262,394,547,-979,832,420,760,468,56,-576,-292,-734,-913,39,-913,631,824,-406,-332,-592,583,583,-604,885,-535,144,222,-393,-699,-388,-835,36,532,276,-493,-480,-955,562,-821,-174,832,-175,124,-109,-295,855,-573,-626,607,-193,332,-395,-101,-132,947,-295,-866,-676,534,570,-905,-395,700,219,943,-669,770,144,-837,59,322,-787,801,618,-848,-857,104,-413,116,778,689,-978,322,190,-195,798,-669,29,-647,-612,985,-848,-474,108,-603,-488,827,722,-64,591,-748,-735,370,877,261,445,387,-882,823,-801,-3,36,141,43,-772,-527,740,676,-159,-55,119,729,-840,27,344,-964,-443,424,628,700,318,820,-400,-73,839,328,715,-738,-409,-586,999,739,657,912,594,319,243,83,633,807,482,-244,1000,403,815,553,-937,-6,-814,-683,394,-408,-138,785,471,891,454,710,561,93,481,161,-686,-374,110,514,-767,32,279,-731,776,-930,-103,389,-443,-545,-491,-170,147,309,214,564,148,231,-876,702,510,503,-386,-733,-253,19,201,-155,534,396,-618,452,-103,359,385,74,-659,362,905,474,-944,265,-753,-686,76,-119,390,410,635,387,24,-941,-267,193,984,157,-794,692,-3,560,-632,117,-781,-970,-708,-734,-990,912,802,-262,743,354,-238,609,592,-201,687,172,213,455,-526,297,520,-845,-453,30,200,-128,-140,-121,-266,973,270,519,227,466,-85,24,-673,-305,-518,-717,554,680,-780,365,500,-634,-792,-288,-612,900,-487,-297,988,607,-163,-712,-464,-500,-952,253,904,447,-464,2,-570,-699,-785,-42,-145,-339,672,-956,128,545,-361,851,916,-905,-125,855,24,-495,-656,555,462,149,-311,-377,536,-37,871,-19,-203,922,522,679,158,-160,23,976,403,-459,-161,203,-876,718,-764,777,378,-479,-935,697,-262,160,-135,-907,792,263,-648,781,57,211,-885,-159,-943,10,94,691,-309,600,-453,-839,-975,-189,-813,520,371,-126,-77,-689,255,-298,-992,-201,-247,-348,176,-179,-702,-742,930,782,-764,-714,-795,622,726,-346,968,63,-367,-674,-500,-63,-143,545,-143,211,-901,-809,273,145,469,-820,196,503,6,156,-344,250,671,-252,-379,549,39,-816,731,853,150,-24,-465,801,-396,-899,139,189,333,9,-43,348,525,-522,425,-94,-680,-577,-116,-622,587,600,-672,-713,258,710,-269,-79,581,405,-68,-419,439,-698,-796,480,-312,974,700,-819,-109,-926,-990,-374,-599,-206,-60,397,-41,-678,829,-379,-550,-369,427,-716,480,-961,-732,-634,-869,-587,-882,-337,822,-855,-568,-993,-607,436,103,-889,787,-397,630,655,179,-276,297,-224,74,330,64,-35,-311,102,584,949,878,584,-985,383,-484,-189,-86,-37,-440,-35,359,729,-156,-537,-922,425,428,111,790,316,-860,450,-493,321,-652,-574,9,161,-303,746,261,-43,173,-53,-402,-482,489,-41,205,-470,527,771,-393,828,-797,-902,293,-609,164,170,-793,-177,-228,-859,509,-997,59,-567,376,972,546,-817,-560,513,238,134,16,-567,-14,-78,48,514,-24,-126,943,-870,642,-641,511,895,-800,112,204,-395,-20,-226,-268,68,956,-331,-519,390,546,-272,539,-460,-823,23,392,637,945,925,507,770,658,-926,-35,196,-682,-824,-941,501,109,98,776,-68,250,878,112,-155,690,-130,-102,697,777,-471,32,-83,-892,50,575,-517,599,324,-423,-144,387,-588,591,-985,-489,-994,999,-949,412,-869,48,-712,923,103,967,-682,-213,432,803,-718,201,233,763,-426,-18,522,676,142,434,-613,-177,-997,-623,193,41,257,-341,-904,866,152,111,510,-819,-119,315,-817,-648,485,936,-835,-421,389,-297,42,181,141,-133,-315,440,98,-288,-670,-310,796,954,-200,109,747,-35,-250,-703,922,907,-605,370,160,579,-617,292,-166,594,434,-804,240,459,833,317,-684,-231,-872,-43,-452,447,-495,-314,328,490,-703,298,-356,901,297,517,162,368,699,-188,33,348,47,-5,-172,-392,557,601,577,-681,245,106,-740,346,513,310,-67,823,365,-911,600,-615,-841,681,-609,759,-568,254,238,861,582,-371,-366,-29,68,0,-23,514,262,356,70,-253,499,956,-369,-202,388,-501,-144,364,-156,362,248,317,-314,217,-239,418,-908,810,286,702,-40,-496,694,-91,655,-698,-901,720,110,-363,-451,-10,27,-303,-481,401,-636,-141,140,578,-363,-489,-825,-637,139,825,828,260,-567,700,-439,988,433,239,-726,-72,415,484,414,-795,-336,818,-440,-454,-915,611,950,-628,319,-696,189,153,-32,578,-180,218,738,-197,324,155,116,585,852,-65,-472,853,-269,40,-508,945,-300,107,-637,160,576,-729,272,922,95,-471,83,111,-216,-187,720,-558,354,-481,277,-604,236,-186,-258,54,981,-613,807,576,-865,858,844,776,-973,-142,-655,997,745,556,781,-619,-817,367,-847,6,-396,-76,-288,-376,470,-712,887,504,657,704,-463,-773,970,-475,973,-185,84,376,22,-579,-266,-456,-342,-493,884,-628,-642,968,-627,311,79,574,425,-793,276,514,298,-206,573,382,-545,728,58,-312,463,313,454,0,754,-904,-232,-366,131,299,-547,684,175,169,545,576,969,-54,579,941,947,287,-297,842,359,-5,879,-162,756,798,-653,-915,488,-205,70,48,895,-119,-208,-900,-586,433,-783,-15,628,-70,116,678,634,-750,843,-563,-107,-132,-248,-796,732,-55,-977,-695,62,252,-598,-447,8,289,606,-811,-114,304,998,632,165,516,668,-387,433,135,166,936,468,-428,930,988,-999,88,-105,736,404,113,-932,-311,995,779,-214,-284,263,-451,233,-158,-522,-403,491,-287,536,851,-817,-237,-110,-318,-625,-438,308,494,-341,605,-886,-570,484,-475,24,-595,209,29,-994,981,-665,-312,993,-906,696,-626,858,-479,725,-828,-837,-717,-153,275,589,-893,879,847,-768,-82,-625,270,-471,236,-695,-889,-981,-986,-765,-366,-970,-599,-27,-815,845,423,-764,701,-219,-730,-235,950,734,-991,-495,201,120,-268,2,590,-314,-640,-360,568,681,-320,-894,-936,-822,699,233,804,960,-395,-378,-757,-631,608,-851,463,469,911,-138,-779,-478,129,-480,206,641,-268,-121,-860,976,-927,-111,179,-433,988,-796,897,460,-444,440,18,197,691,149,-815,336,-274,659,394,-864,707,899,-517,-832,862,-557,414,76,-25,-56,-761,-509,-352,928,780,-928,-820,-5,109,-544,-530,417,-280,570,396,51,496,686,370,-529,-502,-718,709,230,-391,73,129,-192,-945,-877,-455,-643,-471,-573,-205,583,181,-795,-562,-242,-670,-852,234,-775,219,607,-438,675,15,-75,371,-980,473,-282,-887,-766,-927,-481,384,-437,-373,-290,-578,756,-576,495,751,141,-977,900,296,-479,193,395,-136,-313,-625,-114,-326,-452,995,-255,-159,-429,-443,893,-930,-551,136,-305,-442,-658,817,555,-756,843,189,269,645,52,-271,791,-492,653,-745,-556,-901,210,-93,-425,-531,727,639,-566,847,981,992,-957,-362,-560,448,875,-880,958,956,838,203,721,-355,959,-908,-894,-908,-151,408,442,-234,-462,-754,725,23,-525,982,717,-578,-703,611,418,-781,-752,550,-3,167,-661,-221,996,-254,-931,-720,-803,-625,-907,-880,589,-963,-724,-588,537,276,-819,606,36,-990,-204,909,776,-409,256,-340,900,-218,416,-279,91,838,-77,24,-639,-589,83,261,201,674,856,-880,-977,-880,-573,-797,97,-949,83,-701,96,-541,255,-916,835,-381,-833,182,597,-801,-327,-530,786,679,-694,368,103,56,223,-41,299,36,6,361,-655,-558,-981,991,-783,566,-657,-360,805,496,557,-644,2,384,431,888,-983,57,602,-951,-714,898,-818,367,-688,-84,41,187,-552,-455,-928,488,153,52,-418,416,-960,274,-155,482,-440,523,-776,-55,-546,-973,327,-838,198,-145,59,271,207,691,926,-776,331,-107,-740,814,-269,-265,-755,735,-553,-68,237,633,-100,-450,512,561,98,253,-963,189,830,-341,158,-740,996,-778,248,-767,-877,-604,354,-477,-937,-553,-805,-119,922,889,-277,633,341,-870,-145,146,-126,-632,899,896,-696,-456,674,-33,-457,788,212,-556,-601,-604,604,-695,-967,-588,930,-396,-96,329,694,-148,-630,-500,635,266,-266,517,-216,329,-813,712,-594,-968,-55,-870,409,487,-754,-731,-253,-372,732,98,-274,-15,-39,446,-340,469 };
		int[] multipliers = { -570,851,99,-962,-68,-311,663,-920,-734,656,-611,-156,-491,27,-771,-729,931,467,629,22,321,534,-255,780,840,-879,-504,-716,-906,-379,-286,995,-872,158,-655,-383,687,273,-657,624,348,810,-17,-806,705,-439,-990,307,809,396,-268,-740,-124,-374,620,754,-633,768,-901,399,-905,530,-881,80,507,-801,888,899,592,-762,310,-437,121,912,-550,385,-46,652,-851,-152,420,988,-675,-825,-258,537,163,932,-975,463,-116,332,152,186,392,-627,175,-5,506,-533,-662,214,-560,-983,68,288,-455,-28,-740,-279,82,165,-421,-650,151,-608,128,742,602,-661,-419,527,111,72,63,-513,767,357,316,260,-109,11,943,990,770,1000,45,-982,-695,-983,413,426,-915,949,-444,315,-935,717,897,276,-809,-2,630,-832,141,590,-417,-334,-896,-336,185,-13,464,328,-32,176,482,922,878,-766,783,-441,-941,112,614,117,442,-184,17,-728,752,-558,-881,444,288,-732,227,744,240,-232,964,-246,567,811,655,569,632,-34,-24,926,671,-246,451,-596,290,881,-914,-537,-505,-252,-425,-604,190,-138,911,-407,996,485,-155,-246,-600,336,878,238,-962,814,-507,269,955,567,723,-447,-547,503,281,-319,-897,167,439,670,4,-281,-321,-993,-146,-976,937,970,-44,351,883,368,405,-216,-869,598,530,750,-998,59,676,-39,-487,965,-711,-197,990,-96,857,435,-139,17,-470,-672,-365,-823,17,709,-206,-2,617,382,494,861,899,-896,-56,927,164,984,-674,220,577,-453,-749,658,195,-790,-90,943,-870,681,858,401,-17,190,493,-593,-733,-956,-406,544,-892,-798,123,-259,137,369,908,975,-69,-460,207,170,895,592,425,94,516,-747,533,629,75,-496,585,-684,336,624,-67,587,149,-772,-117,124,60,-51,-636,-861,788,576,-391,101,48,271,836,-737,-230,263,779,-769,-387,557,675,895,607,-852,875,-435,-97,-827,324,93,-569,806,467,839,64,-951,707,-634,-340,126,689,923,504,474,-451,-369,261,6,-895,-875,989,-991,110,910,153,463,461,289,978,-519,467,520,-548,664,-935,444,51,-866,619,-834,310,675,-692,953,-786,-476,722,977,-204,14,-175,422,138,-594,172,-841,-593,760,101,568,-800,431,-334,470,-987,53,714,446,307,-47,861,-74,-18,814,-465,-211,683,-751,-585,567,968,283,-927,-414,-283,689,644,-184,940,42,145,-226,-97,-855,-153,-287,-17,-936,528,-501,-594,-374,-933,-760,657,698,314,-771,588,76,-22,951,-91,-956,822,-847,565,-397,178,-848,-97,925,-226,-933,-803,-374,661,-750,-928,-509,418,416,586,-26,752,152,455,765,982,-228,-981,-994,589,-570,424,680,813,248,346,-210,-957,189,-163,444,-417,-282,-287,-181,-812,-121,-187,-417,-984,-648,-236,821,503,905,-972,-726,478,438,386,4,-542,-215,-356,-611,915,806,-246,-257,764,-375,519,-439,-443,-474,-482,880,-442,-73,-262,964,329,-152,239,-598,-391,-290,576,222,673,86,140,465,54,-160,-269,-829,-59,939,-469,-706,229,865,-770,-443,-530,541,451,841,-42,-568,0,701,824,-600,-937,2,59,-155,-299,-311,-663,-664,90,995,-81,386,269,-309,913,-102,-80,511,132,556,626,238,-651,-629,97,-240,566,795,373,952,211,-915,-913,898,-841,-86,905,-158,-278,-556,-861,475,379,-36,735,892,350,841,320,256,937,174,-389,-956,-278,-159,-591,201,935,477,924,-675,-503,-837,-547,-488,-26,-402,430,829,-625,986,-428,-101,-114,816,-823,938,234,238,291,132,9,-391,65,471,-273,887,-409,-39,-72,899,525,-141,749,-748,-92,301,495,-448,-98,168,-114,-532,911,-43,108,-809,-429,543,-795,585,-631,-782,705,-366,-113,866,150,-31,97,-763,-648,-71,971,105,559,-799,332,-139,-969,970,305,30,-335,967,-903,728,298,-665,943,793,771,850,437,32,-144,530,545,418,-372,-345,-564,-216,680,-988,996,-295,-234,446,527,825,1,-576,-685,785,-160,715,320,753,397,349,313,768,359,-893,421,831,-737,-362,-536,410,792,195,238,287,588,-567,-607,-73,-699,-478,249,182,-162,455,-205,-781,-69,-664,-554,857,-524,-49,813,-853,255,537,203,1000,696,-938,105,632,478,-823,675,237,428,-176,-657,745,878,-170,328,279,86,-744,775,816,780,-353,-588,-41,-806,-83,-804,829,928,868,-643,415,796,143,-206,-4,903,165,927,166,216,148,-307,526,467,851,-38,862,437,786,-302,269,-9,235,-372,-30,-391,-949,-7,26,-33,-801,740,603,-610,9,7,490,-244,-704,467,209,-310,294,618,-516,634,765,909,228,647,879,-357,920,907,-805,361,998,706,480,253,118,-350,532,-193,253,218,812,370,-613,606,521,-927,-974,-582,-919,-666,331,430,401,913,973,387,972,-700,976,-342,668,402,160,-223,-676,-118,930,-223,155,790,604,784,458,-747,906,367,-925,-560,-336,9,466,-452,-776,590,140,-789,466,-871,534 };
		int result = obj.maximumScore(nums, multipliers);
		System.out.println(result);
	}

	Map<Memo1770, Integer> memo = new HashMap<>();

	public int maximumScore(int[] nums, int[] multipliers) {
		int r= dp(nums, multipliers, 0, 0, nums.length - 1);
		return r;
	}

	private int dp(int[] nums, int[] multipliers, int i, int left, int right) {
		if (i >= multipliers.length) {
			return 0;
		}
		Memo1770 obj = new Memo1770(i, left, right);
		if (!memo.containsKey(obj)) {
			int leftSide = nums[left] * multipliers[i] + dp(nums, multipliers, i + 1, left + 1, right);
			int rightSide = nums[right] * multipliers[i] + dp(nums, multipliers, i + 1, left, right -1);
			memo.put(obj, Math.max(leftSide, rightSide));
		}
		return memo.get(obj);
	}

}

class Memo1770 {
	public Memo1770(int i, int left, int right) {
		this.i = i;
		this.left = left;
		this.right = right;
	}

	public int i;
	public int left;
	public int right;

	@Override
	public int hashCode() {
		int hash = 7;
	    hash = 31 * hash + (i == 0 ? 1 : i);
	    hash = 31 * hash + (left == 0 ? 1 : left);
	    hash = 31 * hash + (right == 0 ? 1 : right);
	    return hash;
	}
	@Override
	public boolean equals(Object obj) {
		Memo1770 o = (Memo1770) obj;
		return o.i == this.i && o.left == this.left && o.right == this.right;
	}
	@Override
	public String toString() {
		return "(" + i + "," + left + "," + right+")";
	}
}